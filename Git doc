A self created git documentation for self understanding!
i. repository: folder
ii. commit: saving
iii. fork: copy everything from that folder/repository
iv. github issues: complaints
v. Every file you open will have a history on the top right which can be usede to check what changes were made during what time period. Note that history shows commits which creates checkpoints that can be used to refer what was done when.
vi. Branches: 
    a) Master is the made codebase. All the changes are ultimately reflected in the master branch.
    b) Other branches use master branch codebase and work further. The changes are first saved to that branch and merged with master branch by the owner of the repository after viewing the commits from other side branches.
    c) This concept ensures that while multiple contributors are working on a project the main error free code resides on master branch and every contributor has their own branch which they can work on to work on the code further. Otherwise it would create a lot of chaos and errors.
    d) changes or new commits made in side branches will not be reflected in master branch until commits are merged by the owner. Merging can be done when the side branch contributor creates a pull request.
    e) Whenever a new branch is created it will already hold the contnet that master branch has.
    f) It is upto the owner to accept and merge the pull request or suggest further changes in the code and decline it. 
    g) generating a pull request can be termed as a push and accepting/ merging the pull request can be termed as pull. It is called a pull request because the contributer requests the owner to review the changes and pull them to master branch.
    h) when new changes are made in the side branches compare the side branch with the master branch before generating pull request.
    i) The side branches do not get updated with the current codebase of master branch for that a pull request is generated from main branch to side branch to get the upodated version. Here master branch is compared with the side branch.
    j) Generally there are no conflicts and it shows 'able to automatically merge'. But when there are conflicts such as changes are made on the same line of code and commited in the master branch and the side branch and then side branch generates pull request then it shows 'Not able tio merge automatically'.
    k) If more than 1 side branches commit for the change in same line of code then it is upto owner which to merge in master branch and which to decline. Owner is notified about the conflict and then he has to manually resolve the conflict by comparing the changes of both which is shown on the same page. Once the conflict is resolved the resolution is saved in sidebranch and then the pull request from side branch is accepted. Applicable for j) as well. 
vii. Fork:
